// protoのバージョンの宣言
syntax = "proto3";

// protoファイルから自動生成させるGoのコードの置き先
// (詳細は4章にて)
option go_package = "pkg/grpc";

// packageの宣言
package administrator;

// サービスの定義
service GetAllUserService {
	// サービスが持つメソッドの定義
	rpc GetAll (AllUserRequest) returns (AllUserResponse); 
}

// 型の定義
message AllUserRequest {
}

message AllUserResponse {
	string message = 1;
    string user = 2;
}

service RemoveUserService {
    rpc Remove (RemoveUserRequest) returns (RemoveUserResponse);
}

message RemoveUserRequest {
    string user = 1;
}

message RemoveUserResponse {
    string message = 1;
}

service RemoveItemService {
    rpc Remove (RemoveItemRequest) returns (RemoveItemResponse);
}

message RemoveItemRequest {
    string item = 1;
}

message RemoveItemResponse {
    string message = 1;
}

service PrivilegeUserService {
    rpc Privilege (PrivilegeUserRequest) returns (PrivilegeUserResponse);
}

message PrivilegeUserRequest {
    string user = 1;
    string privilege = 2;
}

message PrivilegeUserResponse {
    string message = 1;
}

service GetAllItemService {
    rpc GetAllItem (AllItemRequest) returns (AllItemResponse);
}

message AllItemRequest {
}

message AllItemResponse {
    string message = 1;
    string item = 2;
}
service GetAllTransactionService {
    rpc GetAllTransaction (AllTransactionRequest) returns (AllTransactionResponse);
}

message AllTransactionRequest {
}

message AllTransactionResponse {
    string message = 1;
    string transaction = 2;
}

service GetSpecificUserTransactionService {
    rpc GetSpecificUser (SpecificUserTransactionRequest) returns (SpecificUserTransactionResponse);
}

message SpecificUserTransactionRequest {
    string user = 1;
}

message SpecificUserTransactionResponse {
    string message = 1;
    string transaction = 2;
}

service SpecificTransactionReponse{
    rpc GetSpecificTransaction (SpecificTransactionRequest) returns (SpecificTransactionResponse);
}

message SpecificTransactionRequest {
    string transaction = 1;
}

message SpecificTransactionResponse {
    string message = 1;
    string transaction = 2;
}

service RegisterTrackingIdService {
    rpc Register (RegisterTrackingIdRequest) returns (RegisterTrackingIdResponse);
}

message RegisterTrackingIdRequest {
    string transaction = 1;
    string tracking_id = 2;
}

message RegisterTrackingIdResponse {
    string message = 1;
}

service UpdateTransactionStatusService {
    rpc Update (UpdateTransactionStatusRequest) returns (UpdateTransactionStatusResponse);
}

message UpdateTransactionStatusRequest {
    string transaction = 1;
    string status = 2;
}

message UpdateTransactionStatusResponse {
    string message = 1;
}

