// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: administrator.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// サービスが持つメソッドの定義
	All(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*AllUserResponse, error)
	Remove(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*VoidResponse, error)
	Privilege(ctx context.Context, in *PrivilegeUserRequest, opts ...grpc.CallOption) (*VoidResponse, error)
	Transaction(ctx context.Context, in *SpecificUserTransactionRequest, opts ...grpc.CallOption) (*SpecificUserTransactionResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) All(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*AllUserResponse, error) {
	out := new(AllUserResponse)
	err := c.cc.Invoke(ctx, "/administrator.UserService/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Remove(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/administrator.UserService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Privilege(ctx context.Context, in *PrivilegeUserRequest, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/administrator.UserService/Privilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Transaction(ctx context.Context, in *SpecificUserTransactionRequest, opts ...grpc.CallOption) (*SpecificUserTransactionResponse, error) {
	out := new(SpecificUserTransactionResponse)
	err := c.cc.Invoke(ctx, "/administrator.UserService/Transaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// サービスが持つメソッドの定義
	All(context.Context, *VoidRequest) (*AllUserResponse, error)
	Remove(context.Context, *RemoveUserRequest) (*VoidResponse, error)
	Privilege(context.Context, *PrivilegeUserRequest) (*VoidResponse, error)
	Transaction(context.Context, *SpecificUserTransactionRequest) (*SpecificUserTransactionResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) All(context.Context, *VoidRequest) (*AllUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedUserServiceServer) Remove(context.Context, *RemoveUserRequest) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedUserServiceServer) Privilege(context.Context, *PrivilegeUserRequest) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Privilege not implemented")
}
func (UnimplementedUserServiceServer) Transaction(context.Context, *SpecificUserTransactionRequest) (*SpecificUserTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.UserService/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).All(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.UserService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Remove(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Privilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivilegeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Privilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.UserService/Privilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Privilege(ctx, req.(*PrivilegeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificUserTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.UserService/Transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Transaction(ctx, req.(*SpecificUserTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrator.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _UserService_All_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _UserService_Remove_Handler,
		},
		{
			MethodName: "Privilege",
			Handler:    _UserService_Privilege_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _UserService_Transaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrator.proto",
}

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	Remove(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*VoidResponse, error)
	All(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*AllItemResponse, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) Remove(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/administrator.ItemService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) All(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*AllItemResponse, error) {
	out := new(AllItemResponse)
	err := c.cc.Invoke(ctx, "/administrator.ItemService/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	Remove(context.Context, *RemoveItemRequest) (*VoidResponse, error)
	All(context.Context, *VoidRequest) (*AllItemResponse, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) Remove(context.Context, *RemoveItemRequest) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedItemServiceServer) All(context.Context, *VoidRequest) (*AllItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.ItemService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Remove(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.ItemService/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).All(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrator.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Remove",
			Handler:    _ItemService_Remove_Handler,
		},
		{
			MethodName: "All",
			Handler:    _ItemService_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrator.proto",
}

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	All(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*AllTransactionResponse, error)
	ById(ctx context.Context, in *SpecificTransactionRequest, opts ...grpc.CallOption) (*SpecificTransactionResponse, error)
	RegisterTrackingId(ctx context.Context, in *RegisterTrackingIdRequest, opts ...grpc.CallOption) (*VoidResponse, error)
	RegisterStatus(ctx context.Context, in *UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*VoidResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) All(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*AllTransactionResponse, error) {
	out := new(AllTransactionResponse)
	err := c.cc.Invoke(ctx, "/administrator.TransactionService/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ById(ctx context.Context, in *SpecificTransactionRequest, opts ...grpc.CallOption) (*SpecificTransactionResponse, error) {
	out := new(SpecificTransactionResponse)
	err := c.cc.Invoke(ctx, "/administrator.TransactionService/ById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) RegisterTrackingId(ctx context.Context, in *RegisterTrackingIdRequest, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/administrator.TransactionService/RegisterTrackingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) RegisterStatus(ctx context.Context, in *UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*VoidResponse, error) {
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, "/administrator.TransactionService/RegisterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	All(context.Context, *VoidRequest) (*AllTransactionResponse, error)
	ById(context.Context, *SpecificTransactionRequest) (*SpecificTransactionResponse, error)
	RegisterTrackingId(context.Context, *RegisterTrackingIdRequest) (*VoidResponse, error)
	RegisterStatus(context.Context, *UpdateTransactionStatusRequest) (*VoidResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) All(context.Context, *VoidRequest) (*AllTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedTransactionServiceServer) ById(context.Context, *SpecificTransactionRequest) (*SpecificTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ById not implemented")
}
func (UnimplementedTransactionServiceServer) RegisterTrackingId(context.Context, *RegisterTrackingIdRequest) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTrackingId not implemented")
}
func (UnimplementedTransactionServiceServer) RegisterStatus(context.Context, *UpdateTransactionStatusRequest) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStatus not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.TransactionService/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).All(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.TransactionService/ById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ById(ctx, req.(*SpecificTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_RegisterTrackingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTrackingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).RegisterTrackingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.TransactionService/RegisterTrackingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).RegisterTrackingId(ctx, req.(*RegisterTrackingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_RegisterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).RegisterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/administrator.TransactionService/RegisterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).RegisterStatus(ctx, req.(*UpdateTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrator.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _TransactionService_All_Handler,
		},
		{
			MethodName: "ById",
			Handler:    _TransactionService_ById_Handler,
		},
		{
			MethodName: "RegisterTrackingId",
			Handler:    _TransactionService_RegisterTrackingId_Handler,
		},
		{
			MethodName: "RegisterStatus",
			Handler:    _TransactionService_RegisterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrator.proto",
}
